// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permission.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignPermissionToRole = `-- name: AssignPermissionToRole :exec
INSERT INTO role_permissions(role_id, permission_id) VALUES ($1 , $2)
`

type AssignPermissionToRoleParams struct {
	RoleID       pgtype.Int4 `json:"role_id"`
	PermissionID pgtype.Int4 `json:"permission_id"`
}

func (q *Queries) AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) error {
	_, err := q.db.Exec(ctx, assignPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const assignPermissionsToRoleBatch = `-- name: AssignPermissionsToRoleBatch :exec

INSERT INTO role_permissions (role_id, permission_id)
VALUES ($1, UNNEST($2::int[]))
`

type AssignPermissionsToRoleBatchParams struct {
	RoleID  pgtype.Int4 `json:"role_id"`
	Column2 []int32     `json:"column_2"`
}

// -- name: AssignPermissionsToRoleBatch :exec
// INSERT INTO role_permissions (role_id, permission_id)
// VALUES ($1, unnest($2))
// ON CONFLICT (role_id, permission_id) DO NOTHING;
func (q *Queries) AssignPermissionsToRoleBatch(ctx context.Context, arg AssignPermissionsToRoleBatchParams) error {
	_, err := q.db.Exec(ctx, assignPermissionsToRoleBatch, arg.RoleID, arg.Column2)
	return err
}

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions(name)
VALUES ($1) RETURNING id, name
`

func (q *Queries) CreatePermission(ctx context.Context, name string) (Permissions, error) {
	row := q.db.QueryRow(ctx, createPermission, name)
	var i Permissions
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePermission, id)
	return err
}

const getPermission = `-- name: GetPermission :one
SELECT id, name FROM permissions WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPermission(ctx context.Context, id int32) (Permissions, error) {
	row := q.db.QueryRow(ctx, getPermission, id)
	var i Permissions
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPermissions = `-- name: GetPermissions :many
SELECT id, name FROM permissions
`

func (q *Queries) GetPermissions(ctx context.Context) ([]Permissions, error) {
	rows, err := q.db.Query(ctx, getPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permissions{}
	for rows.Next() {
		var i Permissions
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolePermissions = `-- name: GetRolePermissions :many
SELECT p.id , p.name FROM permissions p JOIN role_permissions rp ON rp.permission_id = p.id WHERE rp.role_id = $1
`

func (q *Queries) GetRolePermissions(ctx context.Context, roleID pgtype.Int4) ([]Permissions, error) {
	rows, err := q.db.Query(ctx, getRolePermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permissions{}
	for rows.Next() {
		var i Permissions
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllPermissionsFromRole = `-- name: RemoveAllPermissionsFromRole :exec
DELETE FROM role_permissions WHERE role_id = $1
`

func (q *Queries) RemoveAllPermissionsFromRole(ctx context.Context, roleID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, removeAllPermissionsFromRole, roleID)
	return err
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE permissions SET name = COALESCE($1,name) WHERE id = $2 RETURNING id, name
`

type UpdatePermissionParams struct {
	Name pgtype.Text `json:"name"`
	ID   int32       `json:"id"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permissions, error) {
	row := q.db.QueryRow(ctx, updatePermission, arg.Name, arg.ID)
	var i Permissions
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
