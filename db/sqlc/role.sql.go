// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO user_roles(user_id, role_id) VALUES ($1 , $2)
`

type AssignRoleToUserParams struct {
	UserID pgtype.Int4 `json:"user_id"`
	RoleID pgtype.Int4 `json:"role_id"`
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.Exec(ctx, assignRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles(name) VALUES ($1) RETURNING id, name
`

func (q *Queries) CreateRole(ctx context.Context, name string) (Roles, error) {
	row := q.db.QueryRow(ctx, createRole, name)
	var i Roles
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, name FROM roles WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int32) (Roles, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Roles
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT
    r.id AS role_id,
    r.name AS role_name,
    p.id AS permission_id,
    p.name AS permission_name
FROM
    roles r
        LEFT JOIN
    role_permissions rp ON r.id = rp.role_id
        LEFT JOIN
    permissions p ON rp.permission_id = p.id
ORDER BY
    r.id, p.id
`

type GetRolesRow struct {
	RoleID         int32       `json:"role_id"`
	RoleName       string      `json:"role_name"`
	PermissionID   pgtype.Int4 `json:"permission_id"`
	PermissionName pgtype.Text `json:"permission_name"`
}

func (q *Queries) GetRoles(ctx context.Context) ([]GetRolesRow, error) {
	rows, err := q.db.Query(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRolesRow{}
	for rows.Next() {
		var i GetRolesRow
		if err := rows.Scan(
			&i.RoleID,
			&i.RoleName,
			&i.PermissionID,
			&i.PermissionName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT r.id , r.name FROM roles r JOIN user_roles ur ON ur.role_id = r.id WHERE ur.user_id = $1
`

func (q *Queries) GetUserRoles(ctx context.Context, userID pgtype.Int4) ([]Roles, error) {
	rows, err := q.db.Query(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Roles{}
	for rows.Next() {
		var i Roles
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles SET name = COALESCE($1,name) WHERE id = $2 RETURNING id, name
`

type UpdateRoleParams struct {
	Name pgtype.Text `json:"name"`
	ID   int32       `json:"id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Roles, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.Name, arg.ID)
	var i Roles
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
